
import React, { useState, useMemo, useCallback } from 'react';
import { CNNConfig, Layer, LayerType, ConvLayer, PoolLayer, DenseLayer } from './types';
import { suggestArchitecture } from './services/geminiService';
import CodePreview from './components/CodePreview';
import LayerEditor from './components/LayerEditor';
import { MagicIcon } from './components/icons/MagicIcon';

const initialConfig: CNNConfig = {
  inputShape: { width: 64, height: 64, channels: 3 },
  layers: [
    { id: 'c1', type: LayerType.CONV, filters: 32, kernelSize: 3, activation: 'relu' },
    { id: 'p1', type: LayerType.POOL, poolSize: 2, method: 'max' },
    { id: 'f1', type: LayerType.FLATTEN },
    { id: 'd1', type: LayerType.DENSE, units: 128, activation: 'relu' },
    { id: 'd2', type: LayerType.DENSE, units: 10, activation: 'softmax' },
  ],
  learningRate: 0.001,
  optimizer: 'Adam',
};


function App() {
  const [config, setConfig] = useState<CNNConfig>(initialConfig);
  const [datasetDescription, setDatasetDescription] = useState<string>('e.g., classifying images of cats and dogs, 28x28 grayscale');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleUpdateLayer = useCallback((updatedLayer: Layer) => {
    setConfig(prevConfig => ({
      ...prevConfig,
      layers: prevConfig.layers.map(l => l.id === updatedLayer.id ? updatedLayer : l),
    }));
  }, []);

  const handleRemoveLayer = useCallback((layerId: string) => {
    setConfig(prevConfig => ({
      ...prevConfig,
      layers: prevConfig.layers.filter(l => l.id !== layerId),
    }));
  }, []);

  const handleAddLayer = useCallback((type: LayerType) => {
    const newId = `${type}-${Date.now()}`;
    let newLayer: Layer;

    switch (type) {
      case LayerType.CONV:
        newLayer = { id: newId, type: LayerType.CONV, filters: 32, kernelSize: 3, activation: 'relu' };
        break;
      case LayerType.POOL:
        newLayer = { id: newId, type: LayerType.POOL, poolSize: 2, method: 'max' };
        break;
      case LayerType.FLATTEN:
        newLayer = { id: newId, type: LayerType.FLATTEN };
        break;
      case LayerType.DENSE:
        newLayer = { id: newId, type: LayerType.DENSE, units: 64, activation: 'relu' };
        break;
      default:
        return;
    }

    const flattenIndex = config.layers.findIndex(l => l.type === LayerType.FLATTEN);
    const insertIndex = flattenIndex !== -1 ? flattenIndex : config.layers.length;

    const newLayers = [...config.layers];
    if(type === LayerType.CONV || type === LayerType.POOL) {
        newLayers.splice(insertIndex, 0, newLayer);
    } else {
        newLayers.push(newLayer);
    }

    setConfig(prev => ({...prev, layers: newLayers}));
  }, [config.layers]);


  const generateRakuCode = useMemo(() => {
    let code = `# Raku CNN Model - Generated by AI Idea Generator\n\n`;
    code += `use AI::Model::CNN; # Fictional Raku module for demonstration\n`;
    code += `use AI::Optimizer; \n\n`;

    code += `# 1. Define the Model Architecture\n`;
    code += `my $model = AI::Model::CNN.new(\n`;
    code += `    input-shape => [${config.inputShape.channels}, ${config.inputShape.height}, ${config.inputShape.width}], # Channels-first convention\n`;
    code += `    layers => [\n`;

    config.layers.forEach(layer => {
      switch (layer.type) {
        case LayerType.CONV:
          const conv = layer as ConvLayer;
          code += `        Conv2D.new(filters => ${conv.filters}, kernel-size => ${conv.kernelSize}, activation => '${conv.activation}'),\n`;
          break;
        case LayerType.POOL:
          const pool = layer as PoolLayer;
          code += `        ${pool.method === 'max' ? 'MaxPool2D' : 'AvgPool2D'}.new(pool-size => ${pool.poolSize}),\n`;
          break;
        case LayerType.FLATTEN:
          code += `        Flatten.new(),\n`;
          break;
        case LayerType.DENSE:
          const dense = layer as DenseLayer;
          code += `        Dense.new(units => ${dense.units}, activation => '${dense.activation}'),\n`;
          break;
      }
    });

    code += `    ]\n);\n\n`;

    code += `# 2. Compile the Model\n`;
    code += `my $optimizer = ${config.optimizer}.new(learning-rate => ${config.learningRate});\n`;
    code += `$model.compile(\n`;
    code += `    optimizer => $optimizer,\n`;
    code += `    loss => 'categorical-crossentropy',\n`;
    code += `    metrics => ['accuracy']\n`;
    code += `);\n\n`;

    code += `# 3. Print Model Summary\n`;
    code += `$model.summary();\n\n`;
    code += `# 4. TODO: Load your dataset and train the model\n`;
    code += `# my ($X-train, $y-train) = load-training-data('path/to/data');\n`;
    code += `# $model.fit($X-train, $y-train, epochs => 20, batch-size => 32);\n`;

    return code;
  }, [config]);
  
  const handleSuggestArchitecture = async () => {
    setIsLoading(true);
    setError(null);
    try {
        const suggestedConfig = await suggestArchitecture(datasetDescription);
        if (suggestedConfig) {
            setConfig(suggestedConfig);
        } else {
            setError("The AI could not suggest a valid architecture. Please try a more descriptive prompt.");
        }
    } catch (e) {
        console.error(e);
        setError(`An error occurred while fetching the suggestion: ${e instanceof Error ? e.message : String(e)}`);
    } finally {
        setIsLoading(false);
    }
  };


  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 flex flex-col items-center p-4 sm:p-6 lg:p-8">
      <div className="w-full max-w-7xl">
        <header className="text-center mb-8">
          <h1 className="text-4xl sm:text-5xl font-bold text-cyan-400">Raku CNN Idea Generator</h1>
          <p className="text-lg text-gray-400 mt-2">Design a CNN and generate Raku code with AI assistance.</p>
        </header>

        <main className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column: Configuration */}
          <div className="bg-gray-800 rounded-lg p-6 shadow-2xl flex flex-col gap-6 h-fit">
            <div className="border-b border-gray-700 pb-4">
                 <h2 className="text-2xl font-semibold text-cyan-400 mb-3">AI Architecture Suggestion</h2>
                 <p className="text-gray-400 text-sm mb-3">Describe your dataset, and our AI will suggest a starting architecture for you.</p>
                 <div className="flex flex-col sm:flex-row gap-3">
                    <textarea 
                        value={datasetDescription}
                        onChange={(e) => setDatasetDescription(e.target.value)}
                        placeholder="e.g., Classifying images of handwritten digits (MNIST), 28x28 grayscale"
                        className="flex-grow bg-gray-900 border border-gray-600 rounded-md p-2 focus:ring-2 focus:ring-cyan-500 focus:outline-none transition-all text-sm"
                        rows={2}
                    />
                    <button onClick={handleSuggestArchitecture} disabled={isLoading} className="flex items-center justify-center gap-2 bg-cyan-600 hover:bg-cyan-500 text-white font-bold py-2 px-4 rounded-md transition-all duration-200 disabled:bg-gray-500 disabled:cursor-not-allowed">
                       {isLoading ? (
                           <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div>
                       ) : (
                           <MagicIcon />
                       )}
                       {isLoading ? 'Generating...' : 'Suggest'}
                    </button>
                 </div>
                 {error && <p className="text-red-400 text-sm mt-2">{error}</p>}
            </div>

            <div className="flex flex-col gap-4">
                 <h2 className="text-2xl font-semibold text-cyan-400">Model Configuration</h2>
                 {/* Input Shape */}
                 <div className="bg-gray-700/50 p-4 rounded-md">
                    <h3 className="font-semibold text-lg mb-2 text-gray-300">Input Shape</h3>
                    <div className="grid grid-cols-3 gap-3">
                        <div>
                            <label className="text-sm text-gray-400">Width</label>
                            <input type="number" value={config.inputShape.width} onChange={e => setConfig(c => ({...c, inputShape: {...c.inputShape, width: +e.target.value}}))} className="w-full bg-gray-900 border border-gray-600 rounded-md p-2 focus:ring-2 focus:ring-cyan-500 focus:outline-none"/>
                        </div>
                        <div>
                            <label className="text-sm text-gray-400">Height</label>
                            <input type="number" value={config.inputShape.height} onChange={e => setConfig(c => ({...c, inputShape: {...c.inputShape, height: +e.target.value}}))} className="w-full bg-gray-900 border border-gray-600 rounded-md p-2 focus:ring-2 focus:ring-cyan-500 focus:outline-none"/>
                        </div>
                        <div>
                            <label className="text-sm text-gray-400">Channels</label>
                            <input type="number" value={config.inputShape.channels} onChange={e => setConfig(c => ({...c, inputShape: {...c.inputShape, channels: +e.target.value}}))} className="w-full bg-gray-900 border border-gray-600 rounded-md p-2 focus:ring-2 focus:ring-cyan-500 focus:outline-none"/>
                        </div>
                    </div>
                 </div>

                 {/* Layers */}
                 <div className="flex flex-col gap-2">
                    {config.layers.map((layer, index) => (
                      <LayerEditor key={layer.id} layer={layer} onUpdate={handleUpdateLayer} onRemove={handleRemoveLayer} isFirst={index === 0} isLast={index === config.layers.length -1} />
                    ))}
                 </div>
                 
                 <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                    <button onClick={() => handleAddLayer(LayerType.CONV)} className="text-sm bg-gray-700 hover:bg-gray-600 p-2 rounded-md transition-colors">Add Conv Layer</button>
                    <button onClick={() => handleAddLayer(LayerType.POOL)} className="text-sm bg-gray-700 hover:bg-gray-600 p-2 rounded-md transition-colors">Add Pool Layer</button>
                    <button onClick={() => handleAddLayer(LayerType.DENSE)} className="text-sm bg-gray-700 hover:bg-gray-600 p-2 rounded-md transition-colors">Add Dense Layer</button>
                    {!config.layers.some(l => l.type === LayerType.FLATTEN) && <button onClick={() => handleAddLayer(LayerType.FLATTEN)} className="text-sm bg-gray-700 hover:bg-gray-600 p-2 rounded-md transition-colors">Add Flatten Layer</button>}
                 </div>
            </div>

          </div>

          {/* Right Column: Code Preview */}
          <div className="sticky top-8 h-[calc(100vh-4rem)]">
            <CodePreview code={generateRakuCode} />
          </div>
        </main>
      </div>
    </div>
  );
}

export default App;
   